<html>
	<?php
	print_r($_POST); 
	print "<br>";
	print_r($_POST['name']); 
	
	
	//_POST라는 변수가 있는데 이 변수는  php 가 지정한 약속된 변수이다. 
	//사용자가 어떤 데이터를 클라이언트에서 서버로 전송했을때 그 데이터가 담겨지기로 약속한... 
	//이름이 _POST 인 이유는  post 방식으로 전송했기 때문에.
	//html 과  php 에서 모두 표기를 get / _GET 으로 바꾸면 그것대로 작동한다(이건 내가 걍 해봄)
	//여기서는 꼭 대문자로 해야 작동하는구나.  만약에 html에서는 아니어도..
	
	/*포스트는 즉 서버의 상태를 바꾼다고 볼수있다.
	
	
	/*
	feedler 메모
	 
	<서버와 브라우저 사이의 은밀한 사생활 - 요청편>
	
	웹브라우저가 서버에 데이터를 전송할때 여러가지 정보를 전달합니다.
	이중 네임, 잡이라는 텍스트 역시 웹서버로 전송된 데이터중 일부고
	이걸 html헤더라고하는데
	웹서버는 이 정보를 받아서 해석해서 _POST 에 담에서 프로그래머에게 제공하는거죠.
	이외에도 리퍼러, 억셉트랭귀지(웹브라우저가처리할수있는언어-언어권유추가능),
	유저에이전트(사용자의 브라우저) 등을 알수있다.
	헤더에는 굉장히 많은 정보가 들어있고 그 정보 중 하나는 사용자가 전송한 데이터고
	그것을 php는 해석해서 $POST에 저장한다. (예제에서는 배열이 저장됨)
	
	
	
	<서버와 브라우저 사이의 은밀한 사생활 - 응답편>

	윗부분은 리퀘스트에 대한 부분이고
	아랫부분은 서버가 일단 요청을 받으면 그 요청을 접수해서 내부적으로 프로세싱을 하겠죠
	그 결과를 사용자(웹브라우저)에게 리턴해주는데 이를 응답이라합니다
	응답하는 결과는 
	텍스트뷰라고하면 응답한내용중에 텍스트만추출해서보여주는거고
	화면에 보여지는 거랑같다는거죠.
			
	로우는  서버가 클라이언트에게 응답해준 헤더 전체고 텍스트뷰의내용은 요 일부고,
	이중에서 볼만한건 서버는 php를 사용한다는것
	200은 서버의 리스폰스, 요청을 잘 받았고 응답도 잘했다..
	404라고하면 요청은 잘 받았지만 요청한것에 해당하는 데이터가 존재하지 않는다
	304는 브라우저가 요청했지만 브라우저가 이미 그 파일을 캐쉬라고 가지고 있어서
	서버가 전송할 필요가 없다는 것이고 
	그러면 클라이언트는 이메세지를 받으면 더이상요청하지않고 자기가갖고있는캐쉬를쓰는거죠.

	 
	*/
	
	?>
</html>